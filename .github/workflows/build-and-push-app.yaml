name: build and push app image

on:
  push:
    branches: [ 'main' ]

# Optional: avoid overlapping runs on main
# concurrency:
#   group: ${{ github.workflow }}-${{ github.ref }}
#   cancel-in-progress: true

env:
  IMAGE_REPOSITORY: ghcr.io/${{ github.repository }}

jobs:
  version:
    runs-on: ubuntu-latest
    permissions:
      contents: write     # for semantic-release to create tags/releases
      # packages: read
    outputs:
      image: ${{ steps.vars.outputs.image }}
      is_release: ${{ steps.vars.outputs.is_release }}
      release_version: ${{ steps.vars.outputs.release_version }}
      rc_tag: ${{ steps.vars.outputs.rc_tag }}
    steps:
      - name: Checkout (full history for tags)
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: semantic-release (publish)
        id: semrel
        uses: docker://ghcr.io/codfish/semantic-release-action@sha256:5d5447090feb2f9252aac2825ef14e244ecf53528fbe87d585b459adb547b914
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          plugins: |
            ['@semantic-release/commit-analyzer', '@semantic-release/release-notes-generator', '@semantic-release/github']

      - name: Compute image & RC tag
        id: vars
        shell: bash
        run: |
          set -euo pipefail
          IMAGE="${IMAGE_REPOSITORY,,}"
          SHORT_SHA="${GITHUB_SHA::7}"
          TS="$(date -u +%Y%m%d%H%M%S)"
          RAW="$(git describe --tags --abbrev=0 2>/dev/null || true)"
          BASE="${RAW#v}"; [[ -z "${BASE}" ]] && BASE="0.0.0"
          RC_TAG="${BASE}-rc.${SHORT_SHA}.${TS}"
          {
            echo "image=${IMAGE}"
            echo "rc_tag=${RC_TAG}"
            echo "is_release=${{ steps.semrel.outputs.new-release-published }}"
            echo "release_version=${{ steps.semrel.outputs.release-version }}"
          } >> "$GITHUB_OUTPUT"

  build:
    runs-on: ubuntu-latest
    outputs:
      is_release: ${{ steps.semrel.outputs['new-release-published'] }}
      release_version: ${{ steps.semrel.outputs['release-version'] }}
      image: ${{ steps.vars.outputs.image }}
      rc_tag: ${{ steps.vars.outputs.rc_tag }}

    needs: version
    permissions:
      contents: read
      packages: write
      id-token: write         # for cosign keyless
      attestations: write     # for actions/attest-build-provenance
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate container metadata (tags & labels)
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ needs.version.outputs.image }}
          tags: |
            # Release path: {semver}, stable, latest
            type=raw,value=${{ needs.version.outputs.release_version }},enable=${{ needs.version.outputs.is_release == 'true' }}
            type=raw,value=stable,enable=${{ needs.version.outputs.is_release == 'true' }}
            # Non-release path: {base}-rc.{sha}.{ts}
            type=raw,value=${{ needs.version.outputs.rc_tag }},enable=${{ needs.version.outputs.is_release != 'true' }}
            # Always latest
            type=raw,value=latest

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        env:
          DOCKER_BUILD_RECORD_UPLOAD: false
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: false    # avoid duplicate provenance; we'll attach next
          sbom: false
          # Optional build cache to speed things up:
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      - name: Cosign sign (keyless, by digest)
        env:
          IMAGE: ${{ needs.version.outputs.image }}
          DIGEST: ${{ steps.build.outputs.digest }}
        run: cosign sign --yes "${IMAGE}@${DIGEST}"

      - name: Generate artifact attestation (provenance)
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ needs.version.outputs.image }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

  helm_chart:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write
    env:
      CHART_NAME: ${{ github.event.repository.name }}             # matches the app repo name
      OWNER: ${{ github.repository_owner }}
      PAGES_REPO_URL: https://bcit-ltc.github.io/helm-charts
      OCI_PREFIX: oci://ghcr.io/${{ github.repository_owner }}
      IS_RELEASE: ${{ needs.build.outputs.is_release }}
      APP_SEMVER: ${{ needs.build.outputs.release_version }}
      APP_RC_TAG: ${{ needs.build.outputs.rc_tag }}
    steps:
      - name: Checkout (optional)
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4

      - name: Login to GHCR for Helm OCI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ghcr.io --username "${{ github.actor }}" --password-stdin

      - name: Pull current chart from Pages repo
        run: |
          set -euo pipefail
          helm repo add bcit-ltc "${PAGES_REPO_URL}" --force-update
          helm repo update
          mkdir -p "$RUNNER_TEMP/chart"
          helm pull "bcit-ltc/${CHART_NAME}" --untar --untardir "$RUNNER_TEMP/chart"
          echo "CHART_DIR=$RUNNER_TEMP/chart/${CHART_NAME}" >> "$GITHUB_ENV"

      - name: Read current chart version
        id: readver
        run: |
          set -euo pipefail
          cur="$(grep -E '^[[:space:]]*version:' "$CHART_DIR/Chart.yaml" | awk '{print $2}')"
          if [[ -z "${cur:-}" ]]; then
            echo "Could not read chart version from Chart.yaml"; exit 1
          fi
          echo "current=${cur}" >> "$GITHUB_OUTPUT"

      - name: Compute next chart version & appVersion
        id: plan
        shell: bash
        env:
          CURRENT_CHART_VERSION: ${{ steps.readver.outputs.current }}
          IS_RELEASE: ${{ env.IS_RELEASE }}
          APP_SEMVER: ${{ env.APP_SEMVER }}
          APP_RC_TAG: ${{ env.APP_RC_TAG }}
        run: |
          set -euo pipefail

          bump_patch() {
            IFS='.' read -r maj min pat <<< "$1"
            [[ -z "$maj" || -z "$min" || -z "$pat" ]] && { echo "Invalid SemVer: $1" >&2; exit 1; }
            echo "${maj}.${min}.$((pat+1))"
          }

          if [[ "${IS_RELEASE}" == "true" && -n "${APP_SEMVER}" ]]; then
            # Real app release:
            NEW_CHART_VERSION="$(bump_patch "${CURRENT_CHART_VERSION}")"
            APP_VERSION="${APP_SEMVER}"
          else
            # RC: reuse the SAME -rc.<sha>.<ts> suffix as the app image tag
            # Extract suffix after the first '-rc.' in APP_RC_TAG
            if [[ "${APP_RC_TAG}" == *-rc.* ]]; then
              SUFFIX="${APP_RC_TAG#*-rc.}"       # e.g., "abcdef1.1724456789"
              RC_SUFFIX="-rc.${SUFFIX}"          # -> "-rc.abcdef1.1724456789"
            else
              # Fallback (shouldn't happen): synthesize a suffix
              SHORT_SHA="${GITHUB_SHA::7}"
              TS="$(date +%s)"
              RC_SUFFIX="-rc.${SHORT_SHA}.${TS}"
            fi
            NEW_CHART_VERSION="${CURRENT_CHART_VERSION}${RC_SUFFIX}"
            APP_VERSION="${APP_RC_TAG}"
          fi

          echo "chart_version=${NEW_CHART_VERSION}" >> "$GITHUB_OUTPUT"
          echo "app_version=${APP_VERSION}"        >> "$GITHUB_OUTPUT"

      - name: Update Chart.yaml (version & appVersion)
        run: |
          set -euo pipefail
          CHV="${{ steps.plan.outputs.chart_version }}"
          APV="${{ steps.plan.outputs.app_version }}"

          # Update version:
          if grep -qE '^[[:space:]]*version:' "$CHART_DIR/Chart.yaml"; then
            sed -i.bak -E "s|^[[:space:]]*version:.*|version: ${CHV}|" "$CHART_DIR/Chart.yaml"
          else
            echo "version: ${CHV}" >> "$CHART_DIR/Chart.yaml"
          fi

          # Update appVersion:
          if grep -qE '^[[:space:]]*appVersion:' "$CHART_DIR/Chart.yaml"; then
            sed -i.bak -E "s|^[[:space:]]*appVersion:.*|appVersion: ${APV}|" "$CHART_DIR/Chart.yaml"
          else
            echo "appVersion: ${APV}" >> "$CHART_DIR/Chart.yaml"
          fi

          echo "Updated Chart.yaml:"
          grep -E '^(version|appVersion):' "$CHART_DIR/Chart.yaml"

      - name: Package chart
        run: |
          set -euo pipefail
          mkdir -p "$RUNNER_TEMP/pkg"
          helm package "$CHART_DIR" \
            --version "${{ steps.plan.outputs.chart_version }}" \
            --app-version "${{ steps.plan.outputs.app_version }}" \
            --destination "$RUNNER_TEMP/pkg"
          echo "PKG=$(ls "$RUNNER_TEMP/pkg"/*.tgz)" >> "$GITHUB_ENV"

      - name: Push chart to GHCR (OCI)
        run: |
          set -euo pipefail
          helm push "${PKG}" "${OCI_PREFIX}/${CHART_NAME}"


