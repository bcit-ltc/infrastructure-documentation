name: build and push app image

on:
  push:
    branches:
      - '**'

permissions:
  contents: write
  packages: write

jobs:
  docker:
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
    steps:
      - name: Checkout (full history for tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: semantic-release (dry-run)
        id: semantic
        uses: docker://ghcr.io/codfish/semantic-release-action@sha256:5d5447090feb2f9252aac2825ef14e244ecf53528fbe87d585b459adb547b914
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          dry-run: true
          plugins: |
            ['@semantic-release/commit-analyzer', '@semantic-release/release-notes-generator', '@semantic-release/github']

      - name: Decide tags
        id: plan
        shell: bash
        run: |
          set -euo pipefail

          IMAGE="${REGISTRY}/${GITHUB_REPOSITORY,,}"
          SHORTSHA="${GITHUB_SHA::7}"
          TS="$(date +%s)"

          SEMREL_NEW="${{ steps.semantic.outputs.new-release-published }}"
          SEMVER_REL="${{ steps.semantic.outputs.release-version }}"

          TAG_LINES=""
          LABEL_VERSION=""

          if [[ "${SEMREL_NEW}" == "true" && -n "${SEMVER_REL}" ]]; then
            # New release with a concrete semantic version
            TAG_LINES+="${IMAGE}:${SEMVER_REL}"$'\n'
            TAG_LINES+="${IMAGE}:latest"$'\n'
            TAG_LINES+="${IMAGE}:stable"$'\n'
            LABEL_VERSION="${SEMVER_REL}"
            echo "release_type=new" >> "$GITHUB_OUTPUT"
          else
            # No new version -> RC build using latest tag from git
            RAW_TAG="$(git describe --tags --abbrev=0)"
            BASE="${RAW_TAG#v}"
            RC_TAG="${BASE}-rc.${SHORTSHA}.${TS}"

            TAG_LINES+="${IMAGE}:${RC_TAG}"$'\n'
            TAG_LINES+="${IMAGE}:latest"$'\n'
            LABEL_VERSION="${RC_TAG}"
            echo "release_type=rc" >> "$GITHUB_OUTPUT"
            echo "base_semver=${BASE}" >> "$GITHUB_OUTPUT"
          fi

          {
            echo "image=${IMAGE}"
            echo "label_version=${LABEL_VERSION}"
            echo "tag_lines<<EOF"
            printf '%s' "${TAG_LINES}"
            echo
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.plan.outputs.tag_lines }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ steps.plan.outputs.label_version }}
