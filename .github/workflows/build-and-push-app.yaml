name: Build and push app/chart images

on:
  push:
    branches: [ 'main' ]

# Optional: avoid overlapping runs on main
# concurrency:
#   group: ${{ github.workflow }}-${{ github.ref }}
#   cancel-in-progress: true

env:
  IMAGE_REPOSITORY: ghcr.io/${{ github.repository }}
  HELM_CHARTS_REPO: https://bcit-ltc.github.io/helm-charts

jobs:

  get-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      image: ${{ steps.vars.outputs.image }}
      is_release: ${{ steps.vars.outputs.is_release }}
      version: ${{ steps.vars.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Run Semantic Release
        id: semrel
        uses: docker://ghcr.io/codfish/semantic-release-action@sha256:5d5447090feb2f9252aac2825ef14e244ecf53528fbe87d585b459adb547b914
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          plugins: |
            ['@semantic-release/commit-analyzer', '@semantic-release/release-notes-generator', '@semantic-release/github']

      - name: Compute version
        id: vars
        shell: bash
        run: |
          set -euo pipefail
          IMAGE="${IMAGE_REPOSITORY,,}"
          SHORT_SHA="${GITHUB_SHA::7}"
          TS="$(date -u +%Y%m%d%H%M%S)"

          # From semantic-release
          IS_RELEASE="${{ steps.semrel.outputs.new-release-published || 'false' }}"
          RELEASE_VERSION="${{ steps.semrel.outputs.release-version || '' }}"

          if [[ "${IS_RELEASE}" == "true" && -n "${RELEASE_VERSION}" ]]; then
            VERSION="${RELEASE_VERSION}"
          else
            # Base = latest tag (without 'v' prefix) or 0.0.0
            RAW="$(git describe --tags --abbrev=0 2>/dev/null || true)"
            BASE="${RAW#v}"; [[ -z "${BASE}" ]] && BASE="0.0.0"
            VERSION="${BASE}-rc.${SHORT_SHA}.${TS}"
          fi

          {
            echo "image=${IMAGE}"
            echo "is_release=${IS_RELEASE}"
            echo "version=${VERSION}"
          } | tee -a "$GITHUB_OUTPUT"

  build-and-push-app-image:
    runs-on: ubuntu-latest
    needs: get-version
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    env:
      IS_RELEASE: ${{ needs.get-version.outputs.is_release }}
      IMAGE: ${{ needs.get-version.outputs.image }}
      APP_VERSION: ${{ needs.get-version.outputs.version }}
    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate container metadata
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index
        with:
          images: ${IMAGE}
          tags: |
            type=raw,value=${APP_VERSION}
            type=semver,pattern={{major}}.{{minor}},enable=${IS_RELEASE} == 'true' }
            type=raw,value=stable,enable=${IS_RELEASE} == 'true' }
          flavor: |
            latest=true

      - name: Build and push container image
        id: build
        uses: docker/build-push-action@v6
        env:
          DOCKER_BUILD_RECORD_UPLOAD: false
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          provenance: false
          sbom: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      - name: Cosign sign (keyless, by digest)
        env:
          IMAGE: ${IMAGE}
          DIGEST: ${{ steps.build.outputs.digest }}
        run: cosign sign --yes "${IMAGE}@${DIGEST}"

      - name: Generate artifact attestation (provenance)
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${IMAGE}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

  update-helm-chart:
    runs-on: ubuntu-latest
    needs: get-version
    permissions:
      contents: read
      packages: write
    env:
      CHART_NAME: ${{ github.event.repository.name }}
      OCI_PREFIX: oci://ghcr.io/${{ github.repository_owner }}
      IS_RELEASE: ${{ needs.get-version.outputs.is_release }}
      APP_VERSION: ${{ needs.get-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install/set-up Helm
        uses: azure/setup-helm@v4

      - name: Login to GHCR
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ghcr.io --username "${{ github.actor }}" --password-stdin

      - name: Pull latest chart
        run: |
          set -euo pipefail
          helm repo add bcit-ltc "${HELM_CHARTS_REPO}" --force-update
          helm repo update
          mkdir -p "$RUNNER_TEMP/chart"
          helm pull "${OCI_PREFIX}/oci/${CHART_NAME}" --untar --untardir "$RUNNER_TEMP/chart"
          echo "CHART_DIR=$RUNNER_TEMP/chart/${CHART_NAME}" >> "$GITHUB_ENV"

      - name: Update image tag in values.yaml
        run: |
          set -euo pipefail
          yq -i ".image.tag = \"${APP_VERSION}\"" "$CHART_DIR/values.yaml"
          echo "Updated values.yaml image.tag to ${APP_VERSION}"
          grep -E '^[[:space:]]*image:' -A2 "$CHART_DIR/values.yaml"

      - name: Package chart with new versions
        run: |
          set -euo pipefail
          mkdir -p "$RUNNER_TEMP/pkg"
          helm package "$CHART_DIR" \
            --version "${APP_VERSION}" \
            --app-version "${APP_VERSION}" \
            --destination "$RUNNER_TEMP/pkg"
          echo "PKG=$(ls "$RUNNER_TEMP/pkg"/*.tgz)" >> "$GITHUB_ENV"

      - name: Push chart to GHCR (OCI)
        run: |
          set -euo pipefail
          helm push "${PKG}" "${OCI_PREFIX}/oci"
