name: build and push app image

on:
  push:
    branches: [ 'main' ]

# Optional: avoid overlapping runs on main
# concurrency:
#   group: ${{ github.workflow }}-${{ github.ref }}
#   cancel-in-progress: true

env:
  IMAGE_REPOSITORY: ghcr.io/${{ github.repository }}

jobs:
  version:
    runs-on: ubuntu-latest
    permissions:
      contents: write     # for semantic-release to create tags/releases
      # packages: read
    outputs:
      image: ${{ steps.vars.outputs.image }}
      is_release: ${{ steps.vars.outputs.is_release }}
      release_version: ${{ steps.vars.outputs.release_version }}
      rc_tag: ${{ steps.vars.outputs.rc_tag }}
    steps:
      - name: Checkout (full history for tags)
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: semantic-release (publish)
        id: semrel
        uses: docker://ghcr.io/codfish/semantic-release-action@sha256:5d5447090feb2f9252aac2825ef14e244ecf53528fbe87d585b459adb547b914
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          plugins: |
            ['@semantic-release/commit-analyzer', '@semantic-release/release-notes-generator', '@semantic-release/github']

      - name: Compute image & RC tag
        id: vars
        shell: bash
        run: |
          set -euo pipefail
          IMAGE="${IMAGE_REPOSITORY,,}"
          SHORT_SHA="${GITHUB_SHA::7}"
          TS="$(date -u +%Y%m%d%H%M%S)"
          RAW="$(git describe --tags --abbrev=0 2>/dev/null || true)"
          BASE="${RAW#v}"; [[ -z "${BASE}" ]] && BASE="0.0.0"
          RC_TAG="${BASE}-rc.${SHORT_SHA}.${TS}"
          {
            echo "image=${IMAGE}"
            echo "rc_tag=${RC_TAG}"
            echo "is_release=${{ steps.semrel.outputs.new-release-published }}"
            echo "release_version=${{ steps.semrel.outputs.release-version }}"
          } >> "$GITHUB_OUTPUT"

  build:
    runs-on: ubuntu-latest
    needs: version
    permissions:
      contents: read
      packages: write
      id-token: write         # for cosign keyless
      attestations: write     # for actions/attest-build-provenance
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate container metadata (tags & labels)
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ needs.version.outputs.image }}
          tags: |
            # Release path: {semver}, stable, latest
            type=raw,value=${{ needs.version.outputs.release_version }},enable=${{ needs.version.outputs.is_release == 'true' }}
            type=raw,value=stable,enable=${{ needs.version.outputs.is_release == 'true' }}
            # Non-release path: {base}-rc.{sha}.{ts}
            type=raw,value=${{ needs.version.outputs.rc_tag }},enable=${{ needs.version.outputs.is_release != 'true' }}
            # Always latest
            type=raw,value=latest

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        env:
          DOCKER_BUILD_RECORD_UPLOAD: false
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: false    # avoid duplicate provenance; we'll attach next
          sbom: false
          # Optional build cache to speed things up:
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      - name: Cosign sign (keyless, by digest)
        env:
          IMAGE: ${{ needs.version.outputs.image }}
          DIGEST: ${{ steps.build.outputs.digest }}
        run: cosign sign --yes "${IMAGE}@${DIGEST}"

      - name: Generate artifact attestation (provenance)
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ needs.version.outputs.image }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true
