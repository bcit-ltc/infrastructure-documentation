name: Pipeline CI Orchestrator

on:
  push:
    branches:
      - "*"

jobs:
  create-codespace:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Create Codespace via REST API
        id: create_codespace
        run: |
          echo "Creating codespace for repo: $GITHUB_REPOSITORY, ref: $GITHUB_REF_NAME"

          # Make the API call, capture body+status in one var
          http_resp=$(curl -s -w "\n%{http_code}" \
            -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/user/codespaces \
            -d '{
              "repository": "'"${{ github.repository }}"'",
              "ref": "'"${{ github.ref_name }}"'",
              "devcontainer_path": ".devcontainer",
              "display_name": "test-devcontainer"
            }')

          # Split body + code
          http_code=$(echo "$http_resp" | tail -n1)
          body=$(echo "$http_resp" | sed '$d')

          echo "HTTP Status: $http_code"
          echo "Response Body:"
          echo "$body" | jq .

          # Expect 201 Created
          if [ "$http_code" -ne 201 ]; then
            echo "::error ::Failed to create Codespace (HTTP $http_code)"
            exit 1
          fi

          # Extract the ID
          codespace_id=$(echo "$body" | jq -r '.id')
          if [ -z "$codespace_id" ] || [ "$codespace_id" = "null" ]; then
            echo "::error ::API succeeded but .id is null"
            exit 1
          fi

          echo "Created Codespace ID: $codespace_id"
          # Export for next steps
          echo "codespace_id=$codespace_id" >> $GITHUB_OUTPUT

      - name: Verify Codespace Status
        run: |
          cs_id="${{ steps.create_codespace.outputs.codespace_id }}"
          echo "Checking status for Codespace ID: $cs_id"

          status_resp=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/user/codespaces/$cs_id)

          echo "$status_resp" | jq '{id: .id, name: .display_name, state: .state}'
      
# jobs:
#   pipeline-ci-orchestrator:
#     name: Execute Pipeline CI
#     uses: bcit-ltc/.github/.github/workflows/cp-pipeline-ci-reusable.yml@main
#     secrets:
#       HELM_REPO_PAT: ${{ secrets.HELM_REPO_PAT }}
#       DAGGER_CLOUD_TOKEN: ${{ secrets.DAGGER_CLOUD_TOKEN }}


# permissions:
#   contents: write # to be able to publish a GitHub release
#   issues: write # to be able to comment on released issues
#   pull-requests: write # to be able to comment on released pull requests
#   packages: write # Required for pushing images  

# jobs:
#   pipeline-manager:
#     name: Pipeline Manager
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
#       # - name: Print all ENVS
#       #   run: printenv
#       - name: Run Dagger for pipeline-manager development testing
#         uses: dagger/dagger-for-github@8.0.0
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#           HELM_REPO_PAT: ${{ secrets.HELM_REPO_PAT }}
#         with:
#           module: github.com/BCIT-LTC/daggerverse/pipeline-manager@35-add-prefix-for-latest-and-review
#           call: >-
#             run
#             --source=.
#             --github_token=env://GITHUB_TOKEN
#             --helm_repo_pat=env://HELM_REPO_PAT
#             --username=${{ github.actor }}
#             --app_name=${{ github.event.repository.name }}
#             --branch=${{ github.ref_name }}
#             --commit_hash=$(echo $GITHUB_SHA | cut -c1-7)
#             --registry_path=ghcr.io/${{ github.repository }}
#             --repository_url=${{ github.server_url }}/${{ github.repository }}
#           cloud-token: ${{ secrets.DAGGER_CLOUD_TOKEN }}
#           version: "latest"
          
